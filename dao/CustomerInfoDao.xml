<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.edu.cqust.dao.CustomerInfoDao">
	
	<parameterMap id="customerInfoPM" type="cn.edu.cqust.bean.CustomerInfo"/>
	<resultMap id="customerInfoRM" type="cn.edu.cqust.bean.CustomerInfo"/>
	
	<select id="findIdByState" resultType="int">
		select id
		from customer_info
		where state = #{state};
	</select>
	
	<select id="findMaxId" resultType="int">
		select max(id)
		from customer_info;
	</select>
	
	<update id="update">
		update customer_info
		<trim prefix="set" suffixOverrides=",">
			<if test="name != null ">name=#{name},</if>
			<if test="idNumber != null ">idNumber=#{idNumber},</if>
			<if test="gender != null ">gender=#{gender},</if>
			<if test="age != null ">age=#{age},</if>
			<if test="phoneNumber != null">phoneNumber=#{phoneNumber},</if>
			<if test="education != null ">education=#{education},</if>
			<if test="address != null ">address=#{address},</if>
			<if test="professionalSkills != null ">professionalSkills=#{professionalSkills},</if>
			<if test="hasCertificate != null ">hasCertificate=#{hasCertificate},</if>
			<if test="isDisability != null ">isDisability=#{isDisability},</if>
			<if test="sourceOfData != null ">sourceOfData=#{sourceOfData},</if>
			<if test="note != null ">note=#{note},</if>
			<if test="state != null">state=#{state},</if>
			<if test="addedTime != null">addedTime=#{addedTime},</if>
			<if test="addedPerson != null ">addedPerson=#{addedPerson},</if>
		</trim>
		where id = #{id};
	</update>
	
	<insert id="insert">
		insert into customer_info(name, idNumber, gender, age,
		                          phoneNumber, education, address, professionalSkills,
		                          hasCertificate, isDisability, sourceOfData, note,
		                          state, addedTime)
		values (#{name}, #{idNumber}, #{gender}, #{age},
		        #{phoneNumber}, #{education}, #{address}, #{professionalSkills},
		        #{hasCertificate}, #{isDisability}, #{sourceOfData}, #{note},
		        #{state}, #{addedTime})
	</insert>
	
	<select id="count" resultType="int">
		select count(id)
		from customer_info;
	</select>
	
	<select id="findByStateAndAfterTimeLimit" resultType="int">
		select id
		from customer_info
		where state = #{state}
		  and addedTime &gt;=
		      (select DATE_SUB(curdate(), interval (
			      select value
			      from system_settings
			      where id = 4) day));
	</select>
	
	<select id="findFuzzily" resultMap="customerInfoRM">
		select * from hrms.customer_info
		<where>
			<if test="customerInfo.id != null">
				and id = #{customerInfo.id}
			</if>
			<if test="customerInfo.name != null">
				and name like concat('%', #{customerInfo.name}, '%')
			</if>
			<if test="customerInfo.idNumber != null">
				and idNumber like concat('%', #{customerInfo.idNumber}, '%')
			</if>
			<if test="customerInfo.gender != null">
				and gender like concat('%', #{customerInfo.gender}, '%')
			</if>
			<if test="customerInfo.age != null">
				and age like concat('%', #{customerInfo.age}, '%')
			</if>
			<if test="customerInfo.phoneNumber != null">
				and phoneNumber like concat('%', #{customerInfo.phoneNumber}, '%')
			</if>
			<if test="customerInfo.education != null">
				and education like concat('%', #{customerInfo.education}, '%')
			</if>
			<if test="customerInfo.address != null">
				and address like concat('%', #{customerInfo.address}, '%')
			</if>
			<if test="customerInfo.professionalSkills != null">
				and professionalSkills like concat('%', #{customerInfo.professionalSkills}, '%')
			</if>
			<if test="customerInfo.hasCertificate != null">
				and hasCertificate like concat('%', #{customerInfo.hasCertificate}, '%')
			</if>
			<if test="customerInfo.isDisability != null">
				and isDisability like concat('%', #{customerInfo.isDisability}, '%')
			</if>
			<if test="customerInfo.sourceOfData != null">
				and sourceOfData like concat('%', #{customerInfo.sourceOfData}, '%')
			</if>
			<if test="customerInfo.note != null">
				and note like concat('%', #{customerInfo.note}, '%')
			</if>
			<if test="customerInfo.state != null">
				and state like concat('%', #{customerInfo.state}, '%')
			</if>
			<if test="customerInfo.addedTime != null">
				and addedTime like concat('%', #{customerInfo.addedTime}, '%')
			</if>
			<if test="customerInfo.addedPerson != null">
				and addedPerson like concat('%', #{customerInfo.addedPerson}, '%')
			</if>
		</where>
		<if test="startIndex != null">
			limit #{startIndex}, 10;
		</if>
	</select>

</mapper>