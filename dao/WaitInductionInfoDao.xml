<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.edu.cqust.dao.WaitInductionInfoDao">
	
	<resultMap id="roWaitInductionRM" type="cn.edu.cqust.bean.vo.RoWaitInduction"/>
	<resultMap id="roWaitInductionAllRM" type="cn.edu.cqust.bean.vo.RoWaitInductionAll"/>
	<resultMap id="roWaitInductionGroupRM" type="cn.edu.cqust.bean.vo.RoWaitInductionGroup"/>
	<resultMap id="roWaitInductionAllMarketRM" type="cn.edu.cqust.bean.vo.RoWaitInductionAllMarket"/>
	<parameterMap id="waitInductionInfoPM" type="cn.edu.cqust.bean.WaitInductionInfo"/>
	<resultMap id="waitInductionInfoRM" type="cn.edu.cqust.bean.WaitInductionInfo"/>
	
	<select id="findByMC1" resultMap="roWaitInductionRM">
		select
		t1.id as waitInductionId,
		t2.name,
		t2.idNumber,
		t2.gender,
		t2.age,
		t2.phoneNumber,
		t2.education,
		t2.address,
		t2.professionalSkills,
		t2.hasCertificate,
		t2.isDisability,
		t4.recommendEnterprise,
		t4.recommendJob,
		t1.interviewQualifiedTime,
		t1.state,
		t1.delayTime,
		t1.note
		from wait_induction_info as t1
		inner join
		(select id,
		name, #
		idNumber, #
		gender,
		age,
		phoneNumber, #
		education,
		address,
		professionalSkills,
		hasCertificate,
		isDisability
		from customer_info
		<where>
			<if test="customerInfo.name != null">
				and name like concat('%', #{customerInfo.name}, '%')
			</if>
			<if test="customerInfo.idNumber != null">
				and idNumber like concat('%', #{customerInfo.idNumber}, '%')
			</if>
			<if test="customerInfo.phoneNumber != null">
				and phoneNumber like concat('%', #{customerInfo.phoneNumber}, '%')
			</if>
		</where>
		) as t2
		on t1.customerId = t2.id
		inner join
		(select id
		from employee
		where phone = #{employeePhone}) as t3
		on t1.employeeId = t3.id
		inner join phone_call_list as t4
		on t1.phoneCallListId = t4.id
		limit #{startIndex}, 10;
	</select>
	
	<select id="countByMC1" resultType="int">
		select count(t1.id)
		from wait_induction_info as t1
		inner join
		(select id,
		name, #
		idNumber, #
		gender,
		age,
		phoneNumber, #
		education,
		address,
		professionalSkills,
		hasCertificate,
		isDisability
		from customer_info
		<where>
			<if test="customerInfo.name != null">
				and name like concat('%', #{customerInfo.name}, '%')
			</if>
			<if test="customerInfo.idNumber != null">
				and idNumber like concat('%', #{customerInfo.idNumber}, '%')
			</if>
			<if test="customerInfo.phoneNumber != null">
				and phoneNumber like concat('%', #{customerInfo.phoneNumber}, '%')
			</if>
		</where>
		) as t2
		on t1.customerId = t2.id
		inner join
		(select id
		from employee
		where phone = #{employeePhone}) as t3
		on t1.employeeId = t3.id
		inner join phone_call_list as t4
		on t1.phoneCallListId = t4.id;
	</select>
	
	<select id="findById" resultMap="waitInductionInfoRM">
		select *
		from wait_induction_info
		where id = #{id};
	</select>
	
	
	<update id="update">
		update wait_induction_info
		<trim prefix="set" suffixOverrides=",">
			<if test="interviewQualifiedTime != null">
				interviewQualifiedTime=#{interviewQualifiedTime},
			</if>
			<if test="state != null">
				state=#{state},
			</if>
			<if test="stateOne != null">
				stateOne=#{stateOne},
			</if>
			<if test="medicalQualifiedTime != null">
				medicalQualifiedTime=#{medicalQualifiedTime},
			</if>
			<if test="delayTime != null">
				delayTime=#{delayTime},
			</if>
			<if test="note != null">
				note=#{note},
			</if>
		</trim>
		where id = #{id};
	</update>
	
	<insert id="insert">
		insert into wait_induction_info(interviewQualifiedTime, state,
		                                medicalQualifiedTime, delayTime, note,
		                                customerId, phoneCallListId, employeeId, stateOne)
		values (#{interviewQualifiedTime}, #{state},
		        #{medicalQualifiedTime}, #{delayTime}, #{note},
		        #{customerId}, #{phoneCallListId}, #{employeeId}, #{stateOne})
	</insert>
	
	
	<select id="findByMC2" resultMap="roWaitInductionAllRM">
		select
		t1.id as waitInductionId,
		t2.name,
		t2.idNumber,
		t2.gender,
		t2.age,
		t2.phoneNumber,
		t2.education,
		t2.address,
		t2.professionalSkills,
		t2.hasCertificate,
		t2.isDisability,
		t4.recommendEnterprise,
		t4.recommendJob,
		t3.name as employeeName,
		t3.deptName,
		t3.id as employeeId,
		t1.interviewQualifiedTime,
		t1.state,
		t1.delayTime,
		t1.medicalQualifiedTime,
		t1.note,
		t2.id as customerId,
		t4.id as phoneCallListId
		from (select *
		from wait_induction_info
		<where>
			<if test="qo.state != null">
				and state like concat('%', #{qo.state}, '%')
			</if>
		</where>
		) as t1
		inner join
		(select id,
		name, #
		idNumber, #
		gender,
		age,
		phoneNumber, #
		education,
		address,
		professionalSkills,
		hasCertificate,
		isDisability
		from customer_info
		<where>
			<if test="qo.customerName != null">
				and name like concat('%', #{qo.customerName}, '%')
			</if>
			<if test="qo.idNumber != null">
				and idNumber like concat('%', #{qo.idNumber}, '%')
			</if>
			<if test="qo.phoneNumber != null">
				and phoneNumber like concat('%', #{qo.phoneNumber}, '%')
			</if>
		</where>
		) as t2
		on t1.customerId = t2.id
		inner join
		(select id,name,deptName
		from employee
		<where>
			<if test="qo.employeeName != null">
				and name like concat('%', #{qo.employeeName}, '%')
			</if>
			<if test="qo.deptName != null">
				and deptName like concat('%', #{qo.deptName}, '%')
			</if>
		</where>
		) as t3
		on t1.employeeId = t3.id
		inner join (select *
		from phone_call_list
		<where>
			<if test="qo.recommendEnterprise != null">
				and recommendEnterprise like concat('%', #{qo.recommendEnterprise}, '%')
			</if>
		</where>
		) as t4
		on t1.phoneCallListId = t4.id
		<if test="startIndex != null">
			limit #{startIndex}, 10;
		</if>
	</select>
	
	
	<select id="find" resultMap="waitInductionInfoRM">
		select * from wait_induction_info
		<where>
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="interviewQualifiedTime != null">
				and interviewQualifiedTime = #{interviewQualifiedTime}
			</if>
			<if test="state != null">
				and state = #{state}
			</if>
			<if test="stateOne != null">
				and stateOne = #{stateOne}
			</if>
			<if test="medicalQualifiedTime != null">
				and medicalQualifiedTime = #{medicalQualifiedTime}
			</if>
			<if test="delayTime != null">
				and delayTime = #{delayTime}
			</if>
			<if test="note != null">
				and note = #{note}
			</if>
			<if test="customerId != null">
				and customerId = #{customerId}
			</if>
			<if test="phoneCallListId != null">
				and phoneCallListId = #{phoneCallListId}
			</if>
			<if test="employeeId != null">
				and employeeId = #{employeeId}
			</if>
		</where>
	</select>
	
	<select id="findByMC3" resultMap="roWaitInductionGroupRM">
		select
		t1.id,
		t2.name as customerName,
		t2.idNumber,
		t2.gender,
		t2.age,
		t2.phoneNumber,
		t2.education,
		t2.address,
		t2.professionalSkills,
		t2.hasCertificate,
		t2.isDisability,
		t4.recommendEnterprise,
		t4.recommendJob,
		t1.interviewQualifiedTime,
		t1.state,
		t1.delayTime,
		t1.note,
		t3.name as employeeName
		from wait_induction_info as t1
		inner join
		(select *
		from customer_info
		<where>
			<if test="customerInfo.name != null">
				and name like concat('%', #{customerInfo.name}, '%')
			</if>
			<if test="customerInfo.idNumber != null">
				and idNumber like concat('%', #{customerInfo.idNumber}, '%')
			</if>
			<if test="customerInfo.phoneNumber != null">
				and phoneNumber like concat('%', #{customerInfo.phoneNumber}, '%')
			</if>
		</where>
		) as t2
		on t1.customerId = t2.id
		inner join
		(select *
		from employee
		<where>
			deptName = #{deptName}
			<if test="employeeName != null">
				and name like concat('%', #{employeeName}, '%')
			</if>
		</where>
		) as t3
		on t1.employeeId = t3.id
		inner join
		phone_call_list as t4
		on t1.phoneCallListId = t4.id
		<if test="startIndex != null">
			limit #{startIndex}, 10;
		</if>
	</select>
	
	
	<select id="findByMC4" resultMap="roWaitInductionAllMarketRM">
		select
		t1.id as waitInductionId,
		t2.name as customerName,
		t2.idNumber,
		t2.gender,
		t2.age,
		t2.phoneNumber,
		t2.education,
		t2.address,
		t2.professionalSkills,
		t2.hasCertificate,
		t2.isDisability,
		t4.recommendEnterprise,
		t4.recommendJob,
		t1.interviewQualifiedTime,
		t1.state,
		t1.delayTime,
		t1.note
		from (select *
		from wait_induction_info
		<where>
			<if test="qo.stateOne != null">
				and stateOne = #{qo.stateOne}
			</if>
		</where>
		) as t1
		inner join
		(select id,
		name, #
		idNumber, #
		gender,
		age,
		phoneNumber, #
		education,
		address,
		professionalSkills,
		hasCertificate,
		isDisability
		from customer_info
		<where>
			<if test="qo.customerName != null">
				and name like concat('%', #{qo.customerName}, '%')
			</if>
			<if test="qo.idNumber != null">
				and idNumber like concat('%', #{qo.idNumber}, '%')
			</if>
			<if test="qo.phoneNumber != null">
				and phoneNumber like concat('%', #{qo.phoneNumber}, '%')
			</if>
		</where>
		) as t2
		on t1.customerId = t2.id
		inner join
		(select id,name,deptName
		from employee
		<where>
			<if test="qo.employeeName != null">
				and name like concat('%', #{qo.employeeName}, '%')
			</if>
			<if test="qo.deptName != null">
				and deptName like concat('%', #{qo.deptName}, '%')
			</if>
		</where>
		) as t3
		on t1.employeeId = t3.id
		inner join
		phone_call_list as t4
		on t1.phoneCallListId = t4.id
		inner join
		(select *
		from enterprise_head_info
		where name = #{qo.headName}) as t6
		on t4.recommendEnterprise = t6.enterpriseName
		<if test="startIndex != null">
			limit #{startIndex}, 10;
		</if>
	</select>

</mapper>